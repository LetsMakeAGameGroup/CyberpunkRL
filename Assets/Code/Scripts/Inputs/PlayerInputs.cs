//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Code/Scripts/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c604546b-5775-443b-b455-d052abe2eb43"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7d3a913-7cb0-4529-92c2-c20b86ea3c42"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d5a6fd37-9e1f-4f0c-907e-f70052151372"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone,InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""080d90a6-8e0c-4bae-b887-04bb36f9805c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b6490e2c-bf4e-49f6-b045-b53cd604a8e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1cbace53-56ef-4d4f-9582-0fdabf3734fb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d8d00d45-cbed-493f-84f8-19a20eb3c3c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""465894ca-7add-41e7-883f-6613cca2ffc3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""97c3af7d-355a-4376-a1ca-af7f637465d3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f922bde-b543-43aa-a527-f348cd05a07c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""732c47ed-6127-4dc9-98e0-c89fe161ff67"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterAbilities"",
            ""id"": ""cba04f29-f981-4635-b29b-47f509e9828d"",
            ""actions"": [
                {
                    ""name"": ""PrimarlyAbility"",
                    ""type"": ""Button"",
                    ""id"": ""09c55df8-46cf-49fb-b737-11c682b513ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAbility"",
                    ""type"": ""Button"",
                    ""id"": ""7eb916ab-3646-45a7-bb86-82d09cb92a1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstAbility"",
                    ""type"": ""Button"",
                    ""id"": ""c04387f7-e635-4bba-8cbc-2a85ce966251"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondAbility"",
                    ""type"": ""Button"",
                    ""id"": ""9c1b126f-db4f-4628-ba1f-ad8f00ad8b77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdAbility"",
                    ""type"": ""Button"",
                    ""id"": ""5408ea06-d1e3-468e-92e8-6660db981bc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UltimateAbility"",
                    ""type"": ""Button"",
                    ""id"": ""dbe27209-6283-4c6d-9322-7fc55d577aed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1de42a33-f0d7-4de8-b7c8-c5984ff34e95"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimarlyAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6354c784-428e-4e80-be3e-bb0d5d3703d2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f7a6c66-7293-4d53-8e2b-96560c5936ca"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""399ef8a7-b0ba-4a53-9b19-3a6505409d26"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b67340b5-2a22-4f79-979b-cf5b953f86ed"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThirdAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcda6053-b517-4606-a48f-607a02ee56c3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        // CharacterAbilities
        m_CharacterAbilities = asset.FindActionMap("CharacterAbilities", throwIfNotFound: true);
        m_CharacterAbilities_PrimarlyAbility = m_CharacterAbilities.FindAction("PrimarlyAbility", throwIfNotFound: true);
        m_CharacterAbilities_SecondaryAbility = m_CharacterAbilities.FindAction("SecondaryAbility", throwIfNotFound: true);
        m_CharacterAbilities_FirstAbility = m_CharacterAbilities.FindAction("FirstAbility", throwIfNotFound: true);
        m_CharacterAbilities_SecondAbility = m_CharacterAbilities.FindAction("SecondAbility", throwIfNotFound: true);
        m_CharacterAbilities_ThirdAbility = m_CharacterAbilities.FindAction("ThirdAbility", throwIfNotFound: true);
        m_CharacterAbilities_UltimateAbility = m_CharacterAbilities.FindAction("UltimateAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // CharacterAbilities
    private readonly InputActionMap m_CharacterAbilities;
    private List<ICharacterAbilitiesActions> m_CharacterAbilitiesActionsCallbackInterfaces = new List<ICharacterAbilitiesActions>();
    private readonly InputAction m_CharacterAbilities_PrimarlyAbility;
    private readonly InputAction m_CharacterAbilities_SecondaryAbility;
    private readonly InputAction m_CharacterAbilities_FirstAbility;
    private readonly InputAction m_CharacterAbilities_SecondAbility;
    private readonly InputAction m_CharacterAbilities_ThirdAbility;
    private readonly InputAction m_CharacterAbilities_UltimateAbility;
    public struct CharacterAbilitiesActions
    {
        private @PlayerInputs m_Wrapper;
        public CharacterAbilitiesActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimarlyAbility => m_Wrapper.m_CharacterAbilities_PrimarlyAbility;
        public InputAction @SecondaryAbility => m_Wrapper.m_CharacterAbilities_SecondaryAbility;
        public InputAction @FirstAbility => m_Wrapper.m_CharacterAbilities_FirstAbility;
        public InputAction @SecondAbility => m_Wrapper.m_CharacterAbilities_SecondAbility;
        public InputAction @ThirdAbility => m_Wrapper.m_CharacterAbilities_ThirdAbility;
        public InputAction @UltimateAbility => m_Wrapper.m_CharacterAbilities_UltimateAbility;
        public InputActionMap Get() { return m_Wrapper.m_CharacterAbilities; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterAbilitiesActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterAbilitiesActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Add(instance);
            @PrimarlyAbility.started += instance.OnPrimarlyAbility;
            @PrimarlyAbility.performed += instance.OnPrimarlyAbility;
            @PrimarlyAbility.canceled += instance.OnPrimarlyAbility;
            @SecondaryAbility.started += instance.OnSecondaryAbility;
            @SecondaryAbility.performed += instance.OnSecondaryAbility;
            @SecondaryAbility.canceled += instance.OnSecondaryAbility;
            @FirstAbility.started += instance.OnFirstAbility;
            @FirstAbility.performed += instance.OnFirstAbility;
            @FirstAbility.canceled += instance.OnFirstAbility;
            @SecondAbility.started += instance.OnSecondAbility;
            @SecondAbility.performed += instance.OnSecondAbility;
            @SecondAbility.canceled += instance.OnSecondAbility;
            @ThirdAbility.started += instance.OnThirdAbility;
            @ThirdAbility.performed += instance.OnThirdAbility;
            @ThirdAbility.canceled += instance.OnThirdAbility;
            @UltimateAbility.started += instance.OnUltimateAbility;
            @UltimateAbility.performed += instance.OnUltimateAbility;
            @UltimateAbility.canceled += instance.OnUltimateAbility;
        }

        private void UnregisterCallbacks(ICharacterAbilitiesActions instance)
        {
            @PrimarlyAbility.started -= instance.OnPrimarlyAbility;
            @PrimarlyAbility.performed -= instance.OnPrimarlyAbility;
            @PrimarlyAbility.canceled -= instance.OnPrimarlyAbility;
            @SecondaryAbility.started -= instance.OnSecondaryAbility;
            @SecondaryAbility.performed -= instance.OnSecondaryAbility;
            @SecondaryAbility.canceled -= instance.OnSecondaryAbility;
            @FirstAbility.started -= instance.OnFirstAbility;
            @FirstAbility.performed -= instance.OnFirstAbility;
            @FirstAbility.canceled -= instance.OnFirstAbility;
            @SecondAbility.started -= instance.OnSecondAbility;
            @SecondAbility.performed -= instance.OnSecondAbility;
            @SecondAbility.canceled -= instance.OnSecondAbility;
            @ThirdAbility.started -= instance.OnThirdAbility;
            @ThirdAbility.performed -= instance.OnThirdAbility;
            @ThirdAbility.canceled -= instance.OnThirdAbility;
            @UltimateAbility.started -= instance.OnUltimateAbility;
            @UltimateAbility.performed -= instance.OnUltimateAbility;
            @UltimateAbility.canceled -= instance.OnUltimateAbility;
        }

        public void RemoveCallbacks(ICharacterAbilitiesActions instance)
        {
            if (m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterAbilitiesActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterAbilitiesActions @CharacterAbilities => new CharacterAbilitiesActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface ICharacterAbilitiesActions
    {
        void OnPrimarlyAbility(InputAction.CallbackContext context);
        void OnSecondaryAbility(InputAction.CallbackContext context);
        void OnFirstAbility(InputAction.CallbackContext context);
        void OnSecondAbility(InputAction.CallbackContext context);
        void OnThirdAbility(InputAction.CallbackContext context);
        void OnUltimateAbility(InputAction.CallbackContext context);
    }
}
